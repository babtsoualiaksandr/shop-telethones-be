service:
  name: import-service
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name
frameworkVersion: '2'

plugins:
  - serverless-webpack
  - serverless-jest-plugin

custom:
  ${file(../authorization-service/serverless.yml)}


provider:
  name: aws
  runtime: nodejs12.x
  region: eu-west-1
  stage: dev  
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - 's3:ListBucket'
      Resource: 
        - "arn:aws:s3:::storage-pothes-store"
    - Effect: 'Allow'
      Action:
        - 's3:*'
      Resource: 
        - "arn:aws:s3:::storage-pothes-store/*"
    - Effect: 'Allow'
      Action: 
        - 'sqs:*'
      Resource: 
        - Fn::GetAtt: [ SQSQueue, Arn]

        
  environment:
    SQS_URL:
      Ref: SQSQueue

resources:
  Resources:
    SQSQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: catalogItemsQueue
  
  Outputs:
    SQSQueueUrl:
      Value:
        Ref: SQSQueue
    SQSQueueArn:
      Value:
        Fn::GetAtt: [ SQSQueue, Arn ]




  

functions:
  importCSVtoS:
    handler: importProductsFile.get
    events:
    - http:
        method: GET
        path: /import
        cors: true
        authorizer: 
          name: tokenAuthorizer
          arn:
            !Join
              - ':'
              - - 'arn:aws:lambda'
                - !Ref AWS::Region
                - !Ref AWS::AccountId
                - 'function:authorization-service-dev-basicAuthorizer'
          resultTtlInSeconds: 0
          identitySource: method.request.header.Authorization
          type: token
        request:
          parameters:
            querystrings:
              name: true


              
  importFileParser:
    handler: importFileParser.parser
    events:
    - s3:
        bucket: storage-pothes-store
        event: s3:ObjectCreated:*
        rules:
          - prefix: uploaded/
        existing: true



